# Mi Agente Inteligente - Versi√≥n 1.0
# Este agente puede calcular el a√±o exacto de nacimiento

import tkinter as tk
from tkinter import messagebox
from datetime import datetime

class MiAgenteInteligente:
    def __init__(self):
        # Crear la ventana principal
        self.ventana = tk.Tk()
        self.ventana.title("ü§ñ Mi Agente Inteligente v2.0 - Consejero Personal")
        self.ventana.geometry("600x500")
        self.ventana.configure(bg='#f0f0f0')
        
        # Crear los elementos de la ventana
        self.crear_interfaz()
        
    def crear_interfaz(self):
        # T√≠tulo
        titulo = tk.Label(
            self.ventana, 
            text="ü§ñ Mi Agente Inteligente v2.0", 
            font=("Arial", 18, "bold"),
            bg='#f0f0f0',
            fg='#333'
        )
        titulo.pack(pady=20)
        
        # Informaci√≥n del agente
        info = tk.Label(
            self.ventana, 
            text="¬°Hola! Soy tu agente consejero personal. Te ayudo a analizar tu informaci√≥n y darte consejos √∫tiles.", 
            font=("Arial", 12),
            bg='#f0f0f0',
            fg='#666'
        )
        info.pack(pady=10)
        
        # Campo para el nombre
        tk.Label(self.ventana, text="üë§ ¬øC√≥mo te llamas?", font=("Arial", 12, "bold"), bg='#f0f0f0').pack(pady=5)
        self.campo_nombre = tk.Entry(self.ventana, font=("Arial", 12), width=40)
        self.campo_nombre.pack(pady=5)
        
        # Campo para la edad
        tk.Label(self.ventana, text="üéÇ ¬øCu√°ntos a√±os tienes?", font=("Arial", 12, "bold"), bg='#f0f0f0').pack(pady=5)
        self.campo_edad = tk.Entry(self.ventana, font=("Arial", 12), width=40)
        self.campo_edad.pack(pady=5)
        
        # Campo para el mes de nacimiento
        tk.Label(self.ventana, text="üìÖ ¬øEn qu√© mes naciste? (1-12)", font=("Arial", 12, "bold"), bg='#f0f0f0').pack(pady=5)
        self.campo_mes = tk.Entry(self.ventana, font=("Arial", 12), width=40)
        self.campo_mes.pack(pady=5)
        
        # Campo para el d√≠a de nacimiento
        tk.Label(self.ventana, text="üìÖ ¬øEn qu√© d√≠a naciste? (1-31)", font=("Arial", 12, "bold"), bg='#f0f0f0').pack(pady=5)
        self.campo_dia = tk.Entry(self.ventana, font=("Arial", 12), width=40)
        self.campo_dia.pack(pady=5)
        
        # Bot√≥n para procesar
        boton = tk.Button(
            self.ventana, 
            text="üöÄ ¬°Procesar con mi agente!", 
            command=self.procesar_informacion,
            font=("Arial", 14, "bold"),
            bg='#4CAF50',
            fg='white',
            padx=30,
            pady=15
        )
        boton.pack(pady=20)
        
        # √Årea de resultados
        self.resultado = tk.Text(
            self.ventana, 
            height=12, 
            width=70, 
            font=("Arial", 11),
            bg='#fff',
            fg='#333',
            wrap=tk.WORD
        )
        self.resultado.pack(pady=10)
        
    def saludar(self, nombre):
        """Esta funci√≥n dice hola a alguien"""
        return f"¬°Hola {nombre}! Soy tu agente inteligente ü§ñ"
    
    def calcular_a√±o_nacimiento_exacto(self, edad, mes, dia):
        """Esta funci√≥n calcula el a√±o exacto de nacimiento"""
        a√±o_actual = datetime.now().year
        mes_actual = datetime.now().month
        dia_actual = datetime.now().day
        
        # Verificar si ya cumpli√≥ a√±os este a√±o
        if mes_actual > mes or (mes_actual == mes and dia_actual >= dia):
            a√±o_nacimiento = a√±o_actual - edad
        else:
            a√±o_nacimiento = a√±o_actual - edad - 1
            
        return a√±o_nacimiento
    
    def obtener_signo_zodiacal(self, mes, dia):
        """Esta funci√≥n determina el signo zodiacal"""
        signos = [
            (1, 20, "Capricornio"), (2, 19, "Acuario"), (3, 21, "Piscis"),
            (4, 20, "Aries"), (5, 21, "Tauro"), (6, 21, "G√©minis"),
            (7, 23, "C√°ncer"), (8, 23, "Leo"), (9, 23, "Virgo"),
            (10, 23, "Libra"), (11, 22, "Escorpio"), (12, 22, "Sagitario")
        ]
        
        for i, (mes_signo, dia_signo, nombre) in enumerate(signos):
            if mes < mes_signo or (mes == mes_signo and dia <= dia_signo):
                return nombre
        return "Capricornio"  # Si no encuentra nada, es Capricornio
    
    def analizar_etapa_vida(self, edad):
        """Esta funci√≥n analiza en qu√© etapa de vida est√°s"""
        if edad < 13:
            return "üë∂ Ni√±ez", "Est√°s en la etapa de ni√±ez. ¬°Disfruta jugando y aprendiendo!"
        elif edad < 18:
            return "üßë Adolescencia", "Est√°s en la adolescencia. ¬°Es momento de explorar y descubrir qui√©n eres!"
        elif edad < 25:
            return "üë®‚Äçüéì Joven adulto", "Est√°s en la juventud. ¬°Es el momento perfecto para estudiar y experimentar!"
        elif edad < 35:
            return "üë®‚Äçüíº Adulto joven", "Est√°s en la adultez temprana. ¬°Es hora de construir tu carrera y relaciones!"
        elif edad < 50:
            return "üë®‚Äçüíº Adulto maduro", "Est√°s en la adultez media. ¬°Es momento de consolidar y crecer!"
        elif edad < 65:
            return "üë®‚Äçüíº Adulto mayor", "Est√°s en la adultez tard√≠a. ¬°Es hora de disfrutar y compartir experiencia!"
        else:
            return "üë¥ Tercera edad", "Est√°s en la tercera edad. ¬°Es momento de sabidur√≠a y tranquilidad!"
    
    def recomendar_carrera(self, edad):
        """Esta funci√≥n recomienda carreras seg√∫n tu edad"""
        if edad < 18:
            return "üìö Estudios b√°sicos", "¬°Enf√≥cate en terminar la secundaria! Es la base para todo lo dem√°s."
        elif edad < 25:
            return "üéì Universidad", "¬°Es el momento perfecto para estudiar una carrera universitaria!"
        elif edad < 35:
            return "üíº Especializaci√≥n", "¬°Considera hacer una maestr√≠a o especializaci√≥n en tu √°rea!"
        elif edad < 50:
            return "üëë Liderazgo", "¬°Es hora de buscar posiciones de liderazgo y mentor√≠a!"
        else:
            return "üéØ Consultor√≠a", "¬°Tu experiencia es valiosa! Considera ser consultor o mentor."
    
    def dar_consejos_salud(self, edad):
        """Esta funci√≥n da consejos de salud seg√∫n la edad"""
        if edad < 18:
            return "üçé Alimentaci√≥n sana", "¬°Come frutas y verduras! Haz ejercicio y duerme bien."
        elif edad < 30:
            return "üí™ Ejercicio regular", "¬°Mant√©n una rutina de ejercicio! Es el momento perfecto para crear buenos h√°bitos."
        elif edad < 50:
            return "üè• Chequeos m√©dicos", "¬°No olvides tus chequeos anuales! La prevenci√≥n es clave."
        else:
            return "üßò Bienestar integral", "¬°Cuida tu mente y cuerpo! La meditaci√≥n y el ejercicio suave son excelentes."
    
    def sugerir_actividades(self, edad):
        """Esta funci√≥n sugiere actividades seg√∫n la edad"""
        if edad < 18:
            return "üéÆ Deportes y juegos", "¬°Practica deportes, lee libros y explora tus intereses!"
        elif edad < 30:
            return "üåç Viajes y experiencias", "¬°Viaja, conoce gente nueva y experimenta cosas diferentes!"
        elif edad < 50:
            return "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Familia y carrera", "¬°Disfruta con tu familia y enf√≥cate en crecer profesionalmente!"
        else:
            return "üé® Hobbies y sabidur√≠a", "¬°Dedica tiempo a tus pasatiempos y comparte tu experiencia con otros!"
    
    def procesar_informacion(self):
        """Esta funci√≥n procesa la informaci√≥n que ingresaste"""
        # Obtener la informaci√≥n que escribiste
        nombre = self.campo_nombre.get().strip()
        edad_texto = self.campo_edad.get().strip()
        mes_texto = self.campo_mes.get().strip()
        dia_texto = self.campo_dia.get().strip()
        
        # Verificar que hayas escrito algo
        if not nombre or not edad_texto or not mes_texto or not dia_texto:
            messagebox.showwarning("‚ö†Ô∏è Atenci√≥n", "Por favor, completa todos los campos")
            return
        
        try:
            edad = int(edad_texto)
            mes = int(mes_texto)
            dia = int(dia_texto)
        except ValueError:
            messagebox.showerror("‚ùå Error", "Por favor, escribe n√∫meros v√°lidos")
            return
        
        # Verificar rangos v√°lidos
        if not (1 <= mes <= 12):
            messagebox.showerror("‚ùå Error", "El mes debe estar entre 1 y 12")
            return
        
        if not (1 <= dia <= 31):
            messagebox.showerror("‚ùå Error", "El d√≠a debe estar entre 1 y 31")
            return
        
        # Limpiar el √°rea de resultados
        self.resultado.delete(1.0, tk.END)
        
        # Procesar la informaci√≥n
        resultado = f"ü§ñ ¬°Hola! Soy tu agente inteligente\n"
        resultado += "=" * 50 + "\n\n"
        
        # Saludar
        saludo = self.saludar(nombre)
        resultado += f"üëã {saludo}\n\n"
        
        # Mostrar informaci√≥n personal
        resultado += f"üìä INFORMACI√ìN PERSONAL:\n"
        resultado += f"   üë§ Nombre: {nombre}\n"
        resultado += f"   üéÇ Edad: {edad} a√±os\n"
        resultado += f"   üìÖ Fecha de nacimiento: {dia}/{mes}\n\n"
        
        # Calcular a√±o de nacimiento exacto
        a√±o_nacimiento = self.calcular_a√±o_nacimiento_exacto(edad, mes, dia)
        resultado += f"üéØ C√ÅLCULOS PRECISOS:\n"
        resultado += f"   üìÖ A√±o de nacimiento: {a√±o_nacimiento}\n"
        resultado += f"   üìÖ Fecha completa: {dia}/{mes}/{a√±o_nacimiento}\n\n"
        
        # An√°lisis inteligente de etapa de vida
        etapa, descripcion_etapa = self.analizar_etapa_vida(edad)
        resultado += f"üß† AN√ÅLISIS INTELIGENTE:\n"
        resultado += f"   {etapa}: {descripcion_etapa}\n\n"
        
        # Recomendaciones de carrera
        carrera, consejo_carrera = self.recomendar_carrera(edad)
        resultado += f"üíº RECOMENDACIONES DE CARRERA:\n"
        resultado += f"   {carrera}: {consejo_carrera}\n\n"
        
        # Consejos de salud
        salud, consejo_salud = self.dar_consejos_salud(edad)
        resultado += f"üè• CONSEJOS DE SALUD:\n"
        resultado += f"   {salud}: {consejo_salud}\n\n"
        
        # Actividades sugeridas
        actividad, consejo_actividad = self.sugerir_actividades(edad)
        resultado += f"üéØ ACTIVIDADES RECOMENDADAS:\n"
        resultado += f"   {actividad}: {consejo_actividad}\n\n"
        
        # Informaci√≥n adicional
        signo = self.obtener_signo_zodiacal(mes, dia)
        resultado += f"‚ôà INFORMACI√ìN ADICIONAL:\n"
        resultado += f"   üåü Signo zodiacal: {signo}\n"
        
        # Categor√≠a de edad
        if edad < 18:
            resultado += f"   üë∂ Categor√≠a: Menor de edad\n"
        elif edad < 65:
            resultado += f"   üë®‚Äçüíº Categor√≠a: Adulto\n"
        else:
            resultado += f"   üë¥ Categor√≠a: Adulto mayor\n"
        
        resultado += f"\nüéâ ¬°An√°lisis completado!\n"
        resultado += f"‚úÖ Tu agente inteligente ha procesado toda la informaci√≥n de {nombre}"
        
        # Mostrar el resultado
        self.resultado.insert(tk.END, resultado)
        
        # Limpiar los campos
        self.campo_nombre.delete(0, tk.END)
        self.campo_edad.delete(0, tk.END)
        self.campo_mes.delete(0, tk.END)
        self.campo_dia.delete(0, tk.END)
    
    def ejecutar(self):
        """Ejecutar el agente"""
        self.ventana.mainloop()

# Crear y ejecutar el agente
if __name__ == "__main__":
    agente = MiAgenteInteligente()
    agente.ejecutar()
